// D'Agostino Normality Test in JSL
Names Default To Here(1);

// Function to compute skewness test
skewnessTest = Function( {x},
    {Default Local},
    
    n = N Rows(x);
    meanX = Col Mean(x);
    s = Col Std Dev(x);
    a3 = Col Mean( (x - meanX) ^ 3 ) / s ^ 3;
    SD3 = Sqrt( 6 * (n - 2) / ((n + 1) * (n + 3)) );
    U3 = a3 / SD3;
    b = (3 * (n ^ 2 + 27 * n - 70) * (n + 1) * (n + 3)) / ((n - 2) * (n + 5) * (n + 7) * (n + 9));
    W2 = Sqrt( 2 * (b - 1) ) - 1;
    delta = 1 / Sqrt( Log( Sqrt(W2) ) );
    a = Sqrt( 2 / (W2 - 1) );
    Z3 = delta * Log( (U3 / a) + Sqrt( (U3 / a) ^ 2 + 1 ) );
    pZ3 = 2 * (1 - Normal Distribution( Abs(Z3) ));
    
    {Z3, pZ3}
);

// Function to compute kurtosis test
kurtosisTest = Function( {x},
    {Default Local},
    
    n = N Rows(x);
    meanX = Col Mean(x);
    s = Col Std Dev(x);
    a4 = Col Mean( (x - meanX) ^ 4 ) / s ^ 4;
    SD4 = Sqrt( 24 * (n - 2) * (n - 3) * n / ((n + 1) ^ 2 * (n + 3) * (n + 5)) );
    U4 = (a4 - 3 + 6 / (n + 1)) / SD4;
    B = (6 * (n ^ 2 - 5 * n + 2) / ((n + 7) * (n + 9))) * Sqrt((6 * (n + 3) * (n + 5)) / (n * (n - 2) * (n - 3)));
    A = 6 + (8 / B) * ((2 / B) + Sqrt(1 + 4 / (B ^ 2)));
    jm = Sqrt(2 / (9 * A));
    pos0 = ((1 - 2 / A) / (1 + U4 * Sqrt(2 / (A - 4))));
    pos = Sign(pos0) * Abs(pos0) ^ (1/3);
    Z4 = (1 - 2 / (9 * A) - pos) / jm;
    pZ4 = 2 * (1 - Normal Distribution( Abs(Z4) ));
    
    {Z4, pZ4}
);

// Function to compute omnibus test
omnibusTest = Function( {x},
    {Default Local},
    
    n = N Rows(x);
    meanX = Col Mean(x);
    s = Col Std Dev(x);
    a3 = Col Mean( (x - meanX) ^ 3 ) / s ^ 3;
    a4 = Col Mean( (x - meanX) ^ 4 ) / s ^ 4;
    SD3 = Sqrt( 6 * (n - 2) / ((n + 1) * (n + 3)) );
    SD4 = Sqrt( 24 * (n - 2) * (n - 3) * n / ((n + 1) ^ 2 * (n + 3) * (n + 5)) );
    U3 = a3 / SD3;
    U4 = (a4 - 3 + 6 / (n + 1)) / SD4;
    b = (3 * (n ^ 2 + 27 * n - 70) * (n + 1) * (n + 3)) / ((n - 2) * (n + 5) * (n + 7) * (n + 9));
    W2 = Sqrt(2 * (b - 1)) - 1;
    delta = 1 / Sqrt(Log(Sqrt(W2)));
    a = Sqrt(2 / (W2 - 1));
    Z3 = delta * Log((U3 / a) + Sqrt((U3 / a) ^ 2 + 1));
    B = (6 * (n ^ 2 - 5 * n + 2) / ((n + 7) * (n + 9))) * Sqrt((6 * (n + 3) * (n + 5)) / (n * (n - 2) * (n - 3)));
    A = 6 + (8 / B) * ((2 / B) + Sqrt(1 + 4 / (B ^ 2)));
    jm = Sqrt(2 / (9 * A));
    pos0 = ((1 - 2 / A) / (1 + U4 * Sqrt(2 / (A - 4))));
    pos = Sign(pos0) * Abs(pos0) ^ (1/3);
    Z4 = (1 - 2 / (9 * A) - pos) / jm;
    omni = Z3 ^ 2 + Z4 ^ 2;
    pomni = 1 - Chi Square Distribution(omni, 2);
    
    {omni, pomni}
);

// Main D'Agostino test function
dagoTest = Function( {dataCol},
    {Default Local},
    
    x = dataCol << Get As Matrix;
    n = N Rows(x);
    
    If(n < 20,
        Throw("Sample size must be at least 20")
    );
    
    {omniStat, omniPVal} = omnibusTest(x);
    {Z3, skewPVal} = skewnessTest(x);
    {Z4, kurtPVal} = kurtosisTest(x);
    
    // Create a data table to show results
    results = New Table("D'Agostino Normality Test Results",
        Add Rows(3),
        New Column("Test", Character, Values({"Omnibus", "Skewness", "Kurtosis"})),
        New Column("Statistic", Numeric, Values({omniStat, Z3, Z4})),
        New Column("p-Value", Numeric, Values({omniPVal, skewPVal, kurtPVal}))
    );
    
    results << Show Window;
);

// Ensure a data table is active
dt = Current Data Table();

If( Is Empty(dt),
    Throw("No active data table. Please open a data table first.")
);

// Get only numeric columns from the active data table
numericColumns = {};
For(i = 1, i <= N Cols(dt), i++,
    col = Column(dt, i);
    If(col << Get Data Type == "Numeric",
        Insert Into(numericColumns, col << Get Name)
    );
);

// Verify that numeric columns were found
If( N Items(numericColumns) == 0,
    Throw("No numeric columns found in the data table. Please ensure the table contains numeric data.")
);

// Dialog to select column
dlog = New Window("Select Column for D'Agostino Test",
    <<Modal,  // Ensures that the dialog box is modal
    V List Box(
        Text Box("Select a numeric column:"),
        colList = Col List Box(dt, "numeric", multipleSelection(0)),
        H List Box(
            Button Box("OK",
                Expr(
                    // Check if a column is selected
                    If(N Items(colList << Get Selected) > 0,
                        selectedCol = colList << Get Selected;
                        Close(dlog); // Close the dialog
                        // Run the test on the selected column
                        dagoTest(Column(dt, selectedCol[1]));
                    ,
                        // If no column is selected, show an error message
                        New Window("Error", Text Box("Please select a column!")); // Show an error message
                    )
                )
            ),
            Button Box("Cancel",
                Expr(
                    Close(dlog); // Just close the dialog
                )
            )
        )
    )
);

dlog << Show Window;
