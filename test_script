// D'Agostino Skewness Normality Test
dAgostinoSkewnessTest = Function({x},
    {
        // Calculate sample size
        n = N Rows(Loc(x));
        
        // Check if the sample size is sufficient
        If(n < 8, Throw("Sample size must be at least 8"));

        // Calculate mean and standard deviation of the data
        meanX = Mean(x);
        s = Sqrt(Sum((x - meanX) ^ 2) / n);

        // Calculate skewness (a3) using the third moment
        a3 = Sum((x - meanX) ^ 3) / (n * s ^ 3);

        // Calculate the standard deviation of skewness under normality
        SD3 = Sqrt(6 * (n - 2) / ((n + 1) * (n + 3)));

        // Standardized skewness (U3)
        U3 = a3 / SD3;

        // Transform U3 into Z3 using D'Agostino's method
        b = (3 * (n ^ 2 + 27 * n - 70) * (n + 1) * (n + 3)) / ((n - 2) * (n + 5) * (n + 7) * (n + 9));
        W2 = Sqrt(2 * (b - 1)) - 1;
        delta = 1 / Sqrt(Log(Sqrt(W2)));
        a = Sqrt(2 / (W2 - 1));
        Z3 = delta * Log((U3 / a) + Sqrt((U3 / a) ^ 2 + 1));

        // Calculate the p-value for the skewness test
        pZ3 = 2 * (1 - Normal Distribution(0, 1) << Prob(Z3));

        // Return the test statistic and p-value
        Return({statistic: Z3, p_value: pZ3, method: "D'Agostino Skewness Normality Test"});
    }
);

// D'Agostino Kurtosis Normality Test
dAgostinoKurtosisTest = Function({x},
    {
        // Calculate sample size
        n = N Rows(Loc(x));

        // Check if the sample size is sufficient
        If(n < 20, Throw("Sample size must be at least 20"));

        // Calculate mean and standard deviation of the data
        meanX = Mean(x);
        s = Sqrt(Sum((x - meanX) ^ 2) / n);

        // Calculate kurtosis (a4) using the fourth moment
        a4 = Sum((x - meanX) ^ 4) / (n * s ^ 4);

        // Calculate the standard deviation of kurtosis under normality
        SD4 = Sqrt(24 * (n - 2) * (n - 3) * n / ((n + 1) ^ 2 * (n + 3) * (n + 5)));

        // Standardized kurtosis (U4)
        U4 = (a4 - 3 + 6 / (n + 1)) / SD4;

        // Transform U4 into Z4 using D'Agostino's method
        B = (6 * (n ^ 2 - 5 * n + 2) / ((n + 7) * (n + 9))) * Sqrt((6 * (n + 3) * (n + 5)) / (n * (n - 2) * (n - 3)));
        A = 6 + (8 / B) * ((2 / B) + Sqrt(1 + 4 / (B ^ 2)));
        jm = Sqrt(2 / (9 * A));

        // Avoid calculation instability for the transformation
        pos0 = ((1 - 2 / A) / (1 + U4 * Sqrt(2 / (A - 4))));
        pos = Sign(pos0) * Abs(pos0) ^ (1 / 3);

        Z4 = (1 - 2 / (9 * A) - pos) / jm;

        // Calculate the p-value for the kurtosis test
        pZ4 = 2 * (1 - Normal Distribution(0, 1) << Prob(Z4));

        // Return the test statistic and p-value
        Return({statistic: Z4, p_value: pZ4, method: "D'Agostino Kurtosis Normality Test"});
    }
);

// D'Agostino Omnibus Normality Test
dAgostinoOmnibusTest = Function({x},
    {
        // Calculate sample size
        n = N Rows(Loc(x));

        // Check if the sample size is sufficient
        If(n < 20, Throw("Sample size must be at least 20"));

        // Calculate mean and standard deviation of the data
        meanX = Mean(x);
        s = Sqrt(Sum((x - meanX) ^ 2) / n);

        // Calculate skewness (a3) and kurtosis (a4)
        a3 = Sum((x - meanX) ^ 3) / (n * s ^ 3);
        a4 = Sum((x - meanX) ^ 4) / (n * s ^ 4);

        // Standardize skewness (U3) and kurtosis (U4)
        SD3 = Sqrt(6 * (n - 2) / ((n + 1) * (n + 3)));
        SD4 = Sqrt(24 * (n - 2) * (n - 3) * n / ((n + 1) ^ 2 * (n + 3) * (n + 5)));
        U3 = a3 / SD3;
        U4 = (a4 - 3 + 6 / (n + 1)) / SD4;

        // Transform U3 into Z3
        b = (3 * (n ^ 2 + 27 * n - 70) * (n + 1) * (n + 3)) / ((n - 2) * (n + 5) * (n + 7) * (n + 9));
        W2 = Sqrt(2 * (b - 1)) - 1;
        delta = 1 / Sqrt(Log(Sqrt(W2)));
        a = Sqrt(2 / (W2 - 1));
        Z3 = delta * Log((U3 / a) + Sqrt((U3 / a) ^ 2 + 1));

        // Transform U4 into Z4
        B = (6 * (n ^ 2 - 5 * n + 2) / ((n + 7) * (n + 9))) * Sqrt((6 * (n + 3) * (n + 5)) / (n * (n - 2) * (n - 3)));
        A = 6 + (8 / B) * ((2 / B) + Sqrt(1 + 4 / (B ^ 2)));
        jm = Sqrt(2 / (9 * A));
        
        pos0 = ((1 - 2 / A) / (1 + U4 * Sqrt(2 / (A - 4))));
        pos = Sign(pos0) * Abs(pos0) ^ (1 / 3);

        Z4 = (1 - 2 / (9 * A) - pos) / jm;

        // Omnibus statistic combines Z3 and Z4
        omni = Z3 ^ 2 + Z4 ^ 2;

        // Calculate p-value for the omnibus test
        pomni = 1 - ChiSquare Distribution(2) << Prob(omni);

        // Return the test statistic and p-value
        Return({statistic: omni, p_value: pomni, method: "D'Agostino Omnibus Normality Test"});
    }
);

// Main Function to Perform D'Agostino Normality Test with Column Selection Dialog
dagoTest = Function({}, // No arguments needed as we will use a dialog to select the column
    {
        // Get the current data table
        dt = Current Data Table();

        // Open a dialog box to select a column
        dlg = New Window("Select Column for D'Agostino Normality Test",
            V List Box(
                Text Box("Select the column you want to test:"),
                colList = Col List Box(dt)
            ),
            Button("OK", Dialog OK()),
            Button("Cancel", Dialog Cancel())
        );

        // Check if the dialog was canceled
        If(Is Empty(dlg), Throw("Dialog was canceled"));

        // Get the selected column
        selectedColumn = colList << Get Selected;

        // Ensure a column is selected
        If(Is Empty(selectedColumn), Throw("No column was selected"));

        // Get the column data
        x = dt:selectedColumn;

        // Execute the three tests
        skewnessResult = dAgostinoSkewnessTest(x);
        kurtosisResult = dAgostinoKurtosisTest(x);
        omnibusResult = dAgostinoOmnibusTest(x);

        // Compile results from each test
        results = {
            skewnessResult,
            kurtosisResult,
            omnibusResult
        };

        // Output results
        For Each(r = results,
            Print("Test:", r["method"], "Statistic:", r["statistic"], "p-value:", r["p_value"]);
        );
    }
);

// Run the dagoTest function
dagoTest();
